// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Colors {
  RED
  BLUE
  GREEN
  YELLOW
  ORANGE
  PURPLE
  PINK
  GRAY
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  name             String          @db.VarChar(30)
  username         String          @unique @db.VarChar(15)
  surname          String?
  age              Int?
  imageUrl         String?
  description      String?         @db.VarChar(50)
  password         String
  posts            Post[]
  profileColor     Colors          @default(GRAY)
  likes            Like[]          @relation("user_likes")
  comments         Comment[]       @relation("user_comments")
  friends          Friend[]        @relation("user_friends")
  friendOf         Friend[]        @relation("user_friendof")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  subscriptions    Subscription[]  @relation("user_subscriptions")
  community        Community?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id          Int       @id @default(autoincrement())
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int
  user        User      @relation("user_subscriptions", fields: [userId], references: [id])
  userId      Int       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(25)
  imageUrl     String
  description  String?        @db.VarChar(50)
  user         User           @relation(fields: [userId], references: [id])
  userId       Int            @unique
  profileColor Colors         @default(GRAY)
  posts        Post[]
  subscribed   Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id       Int  @id @default(autoincrement())
  user     User @relation("user_friends", fields: [userId], references: [id])
  userId   Int
  friend   User @relation("user_friendof", fields: [friendId], references: [id])
  friendId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  sender     User                @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User                @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([senderId, receiverId])
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String?    @db.VarChar(50)
  text        String     @db.VarChar(3000)
  imageUrl    String?
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  community   Community? @relation(fields: [communityId], references: [id])
  communityId Int?
  likes       Like[]
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation("user_likes", fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String @db.VarChar(500)
  user   User   @relation("user_comments", fields: [userId], references: [id])
  userId Int
  post   Post   @relation(fields: [postId], references: [id])
  postId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
